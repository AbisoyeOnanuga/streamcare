import os
import replicate
from dotenv import load_dotenv
from utils import setup_logging
import streamlit as st
from synthetic_test import run_synthetic_test
from training_simulation import run_training_simulation
from user_interaction import run_user_interaction

setup_logging()

load_dotenv()

# Retrieve the API token from the environment variable
REPLICATE_API_TOKEN = os.getenv('REPLICATE_API_TOKEN')

# Initialize the Replicate model with the API key
client = replicate.Client(api_token=REPLICATE_API_TOKEN)

# Define your model_name here (e.g., from a config file or another environment variable)
model_name = "snowflake/snowflake-arctic-instruct"

# Initialize the Streamlit app
def main():
    st.title('Welcome to Streamcare ðŸ©º')
    st.markdown("""
        Your AI-powered assistant for medical diagnosis suggestions. ðŸš€
    """)
    # Sidebar for mode selection and project details
    st.sidebar.title('About Streamcare')
    st.sidebar.markdown("""
        Streamcare is an AI-powered medical assistant designed to provide medical diagnosis suggestions.
        
        **Disclaimer**: The suggestions provided by Streamcare are based on AI-generated content and should not be used as a substitute for professional medical advice, diagnosis, or treatment.
        
        **GitHub**: [Streamcare Repository](https://github.com/AbisoyeOnanuga/streamcare) \n
        **DevPost**: [Streamcare Project](https://devpost.com/software/streamcare)
    """)

    # mode selection
    mode = st.sidebar.radio("Choose the mode:", ["Synthetic Test", "Training Simulation", "User Interaction"])

    if 'ai_responses' not in st.session_state:
        st.session_state.ai_responses = []

    if mode == "Synthetic Test":
        # Synthetic test mode
        st.subheader('Synthetic Test Mode')
        num_cases = st.slider('Number of synthetic cases:', min_value=1, value=25)
        if st.button('Run Synthetic Test'):
            with st.spinner('Running synthetic tests...'):
                run_synthetic_test(num_cases, st)  # Pass the Streamlit context
                st.success('Synthetic tests complete!')

    elif mode == "Training Simulation":
        st.subheader('Training Simulation Mode')
        num_cases = st.slider('Number of training cases:', min_value=1, value=3)
        run_simulation_button = st.button('Run Training Simulation')

        # Use Streamlit's session state to store user inputs and AI responses
        if 'user_inputs' not in st.session_state:
            st.session_state.user_inputs = []
        if 'ai_responses' not in st.session_state:
            st.session_state.ai_responses = []

        if run_simulation_button:
            with st.spinner('Running training simulation...'):
                # Call the run_training_simulation function from the training_simulation.py module
                run_training_simulation(client, model_name, num_cases, st)
                st.success('Training simulation complete!')

        if st.button('Start New Training Simulation'):
            st.session_state.user_inputs = []
            st.session_state.ai_responses = []
            # Reset any other states or variables if necessary

    elif mode == "User Interaction":
        st.subheader('User Interaction Mode')
        medications = st.text_input('Enter medications (separated by commas):')
        side_effects = st.text_input('Enter side effects (separated by commas):')
        medical_condition = st.text_input('Enter medical condition:')
        submit_button = st.button('Submit')

        if submit_button and medications and side_effects and medical_condition:
            with st.spinner('Processing user input...'):
                model_response = run_user_interaction(medications, side_effects, medical_condition, model_name)
                if model_response and model_response != "No relevant information generated by the model.":
                    # Render the AI feedback in Markdown format
                    st.markdown(model_response)
                    st.success('User interaction complete!')
                else:
                    st.error(model_response)

# Run the Streamlit app
if __name__ == '__main__':
    main()
