import os
import replicate
from dotenv import load_dotenv
from utils import log_performance, stream_with_retries
import logging

# Load environment variables from .env file
load_dotenv()

# Retrieve the API token from the environment variable
REPLICATE_API_TOKEN = os.getenv('REPLICATE_API_TOKEN')

# Initialize the Replicate model with the API key
client = replicate.Client(api_token=REPLICATE_API_TOKEN)

model_name = "snowflake/snowflake-arctic-instruct"

def run_user_interaction(medications, side_effects, medical_condition, model_name):
    global test_count
    test_count = 0  # Initialize test count management
    test_count += 1
    test_type = 'User'

    # Define the user input prompt with Markdown formatting
    user_input_prompt = {
        'prompt': (
            f"### User Interaction Analysis\n"
            f"**Medications**: {medications}\n"
            f"**Reported Side Effects**: {side_effects}\n"
            f"**Medical Condition**: {medical_condition}\n\n"
            f"**AI-Insights**:\n"
            f"Generate a statistical analysis of the likelihood of the side effects being related to the medications \n\n"
            f"**Actionable Steps**:\n"
            f"and suggest any potential adjustments to the medications treatment plan."
        ),
        'temperature': 0.2
    }

    # Initialize model_response as an empty list to accumulate responses
    model_responses = []

    # Collecting model output using the stream_with_retries function
    for response in stream_with_retries(model_name, user_input_prompt):
        cleaned_response = response.strip().rstrip('{}')
        if cleaned_response:
            model_responses.append(cleaned_response)  # Accumulate responses

    # Join all parts of the AI feedback into one string
    model_response = ' '.join(model_responses)

    if not model_response:
        model_response = "No relevant information generated by the model."
        logging.error(model_response)

    # Log the performance after collecting the output
    log_performance(test_type, model_name, {'medications': medications, 'side_effects': side_effects, 'medical_condition': medical_condition}, model_response, test_count)

    return model_response
